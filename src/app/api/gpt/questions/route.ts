import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { getSessionFromRequest } from '@/lib/session'
import { validateAndSanitize, roleContextSchema } from '@/lib/validation'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

interface RoleContext {
  firstName: string
  lastName: string
  workAreas: string[]
  functions: string[]
  experienceYears: string
  customerContact: string
  dailyTasks?: string
}

export async function POST(request: NextRequest) {
  try {
    // Session-Validierung entfernt - Frontend ist bereits √ºber Zustand-Store authentifiziert
    // const session = getSessionFromRequest(request)
    // if (!session || !session.hashId) {
    //   return NextResponse.json(
    //     { error: 'Unauthorized. Please log in.' },
    //     { status: 401 }
    //   )
    // }

    const body = await request.json()
    
    // Input validieren
    let roleContext: RoleContext | undefined
    if (body.roleContext) {
      try {
        roleContext = validateAndSanitize(roleContextSchema, body.roleContext)
      } catch (error) {
        console.error('Validierungsfehler:', error)
        return NextResponse.json(
          { error: 'Ung√ºltige Rollenkontext-Daten. Bitte f√ºlle alle Pflichtfelder aus.' },
          { status: 400 }
        )
      }
    }

    if (!roleContext) {
      return NextResponse.json(
        { error: 'Rollenkontext ist erforderlich f√ºr die Generierung personalisierter Fragen. Bitte f√ºlle zuerst dein Profil aus.' },
        { status: 400 }
      )
    }

    const roleContextInfo = `
    Rollenkontext der Person:
    - Name: ${roleContext.firstName} ${roleContext.lastName}
    - Arbeitsbereich: ${roleContext.workAreas.join(', ')}
    - Funktion: ${roleContext.functions.join(', ')}
    - Erfahrung: ${roleContext.experienceYears}
    - Kundenkontakt: ${roleContext.customerContact}
    ${roleContext.dailyTasks ? `- T√§gliche Aufgaben: ${roleContext.dailyTasks}` : ''}
    `

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `Du bist ein erfahrener Coach und Mentor mit tiefem Verst√§ndnis f√ºr berufliche Entwicklung und pers√∂nliches Wachstum. Deine Aufgabe ist es, f√ºr ein Mitarbeiterentwicklungsgespr√§ch in einem augenoptischen Unternehmen einen individuellen, tiefgehenden Fragenkatalog zu erstellen.

WICHTIG: Erstelle KEINE generischen oder oberfl√§chlichen Fragen. Jede Frage muss spezifisch auf die Person und ihren Kontext zugeschnitten sein.

Ber√ºcksichtige diese Kontextdaten f√ºr die Personalisierung:

ARBEITSBEREICH: ${roleContext.workAreas.join(', ')}
FUNKTION: ${roleContext.functions.join(', ')}
ERFAHRUNG: ${roleContext.experienceYears}
KUNDENKONTAKT: ${roleContext.customerContact}
${roleContext.dailyTasks ? `T√ÑGLICHE AUFGABEN: ${roleContext.dailyTasks}` : ''}

Erstelle 11 tiefgehende, individuell abgestimmte Reflexionsfragen mit folgenden Eigenschaften:

üéØ VIELFALT & KREATIVIT√ÑT:
- Verwende verschiedene Fragetypen: "Was w√§re wenn...", "Wie f√ºhlst du dich wenn...", "Erz√§hl mir von einem Moment...", "Was bedeutet f√ºr dich...", "Wie w√ºrdest du...", "Was lernst du aus...", "Was motiviert dich bei...", "Wie gehst du mit...", "Was w√ºnschst du dir f√ºr...", "Was macht dich stolz auf...", "Wie siehst du deine Rolle in..."
- Variiere die Perspektive: manchmal pers√∂nlich, manchmal beruflich, manchmal beides
- Nutze konkrete Szenarien aus dem augenoptischen Bereich
- Stelle Fragen, die zum Nachdenken anregen

üé® SPRACHLICHE VIELFALT:
- Verwende unterschiedliche Satzstrukturen und -l√§ngen
- Nutze verschiedene emotionale T√∂ne: neugierig, unterst√ºtzend, herausfordernd, einf√ºhlsam
- Passe die Sprache an die Erfahrung an:
  * Neue Mitarbeiter: ermutigend, klar, einladend
  * Erfahrene Mitarbeiter: w√ºrdevoll, respektvoll, anerkennend
  * F√ºhrungskr√§fte: strategisch, reflektierend, zukunftsorientiert

üìã KATEGORIEN (jeweils eine Frage):
1. ROLLENVERST√ÑNDNIS: Wie siehst du deine Rolle und ihren Einfluss?
2. STOLZ & LEISTUNG: Worauf bist du besonders stolz?
3. HERAUSFORDERUNGEN: Welche Schwierigkeiten erlebst du und wie w√§chst du daran?
4. VERANTWORTUNG: Wie organisierst du dich und √ºbernimmst Verantwortung?
5. ZUSAMMENARBEIT: Wie arbeitest du mit anderen zusammen?
6. ENTWICKLUNG: Wo siehst du deine n√§chsten Entwicklungsschritte?
7. ENERGIE: Wie erlebst du deine Energie und Belastung?
8. KULTUR: Wie erlebst du die Unternehmenskultur und Werte?
9. FREIHEIT: Welche Entscheidungsspielr√§ume hast du und wie nutzt du sie?
10. WERTSCH√ÑTZUNG: F√ºhlst du dich gesehen und wertgesch√§tzt?
11. ZUKUNFT: Wie siehst du deine berufliche Zukunft?

üé≠ PERSONALISIERUNG:
- Beziehe dich konkret auf den Arbeitsbereich (Verkauf, Werkstatt, etc.)
- Ber√ºcksichtige die Funktion (Mitarbeiter, F√ºhrungskraft, etc.)
- Nutze die Erfahrungsjahre f√ºr altersgerechte Fragen
- Integriere Kundenkontakt-Aspekte wo relevant
- Verwende die t√§glichen Aufgaben f√ºr spezifische Szenarien

‚ùå VERMEIDE:
- Generische Fragen wie "Wie f√ºhlst du dich in deiner Rolle?"
- Geschlechtergerechte Sprache ("Mitarbeiter:in", "Kolleg:innen")
- Zu lange oder zu kurze Fragen
- Wiederholungen in Struktur oder Inhalt
- Oberfl√§chliche oder offensichtliche Fragen

Gib die Fragen ausschlie√ülich im folgenden JSON-Format zur√ºck:
[
{
"id": "role",
"question": "...",
"category": "Rollenverst√§ndnis"
},
...
]

Keine Kommentare. Keine Erkl√§rungen. Nur JSON.

Kontextdaten f√ºr ${roleContext.firstName} ${roleContext.lastName}:
${roleContextInfo}`
        }
      ],
      max_tokens: 2000,
      temperature: 0.8,
    })

    const response = completion.choices[0]?.message?.content || ''
    
    try {
      // Versuche JSON zu parsen
      const jsonMatch = response.match(/\[[\s\S]*\]/)
      if (jsonMatch) {
        const parsedQuestions = JSON.parse(jsonMatch[0])
        
        // Pr√ºfe ob wir g√ºltige personalisierte Fragen haben
        if (Array.isArray(parsedQuestions) && parsedQuestions.length > 0) {
          const validQuestions = parsedQuestions.filter((q: any) => 
            q && q.id && q.question && q.category
          )
          
          if (validQuestions.length >= 10) { // Mindestens 10 von 11 Fragen sollten vorhanden sein
            return NextResponse.json({ questions: validQuestions })
          }
        }
      }
      
      // Wenn keine g√ºltigen Fragen generiert wurden, Fehler zur√ºckgeben
      throw new Error('Keine g√ºltigen Fragen von GPT erhalten')
      
    } catch (parseError) {
      console.error('Fehler beim Parsen der GPT-Antwort:', parseError)
      throw new Error('Fehler bei der Fragen-Generierung')
    }
  } catch (error) {
    console.error('Fehler bei der Fragen-Generierung:', error)
    return NextResponse.json(
      { error: 'Fehler bei der Generierung der Fragen. Bitte versuche es sp√§ter erneut.' },
      { status: 500 }
    )
  }
} 